Useless nonterminals:

   punctuatuion


Terminals which are not used:

   COMMA
   '('
   ')'


Useless rules:

#18    punctuatuion :	 COMMA;
#19    punctuatuion :	 SEMI_COLON;
#20    punctuatuion :	 OPEN_BRACKET;
#21    punctuatuion :	 CLOSE_BRACKET;
#22    punctuatuion :	 OPEN_PAREN;
#23    punctuatuion :	 CLOSE_PAREN;


State 16 contains 1 shift/reduce conflict.
State 49 contains 1 reduce/reduce conflict.
State 61 contains 4 shift/reduce conflicts.

Grammar
rule 1    program -> statement_list
rule 2    statement_list -> statement
rule 3    statement_list -> statement_list statement
rule 4    statement -> declaration
rule 5    @1 ->		/* empty */
rule 6    statement -> IDENTIFIER @1 assignment SEMI_COLON
rule 7    statement -> INPUT SENTENCE_CONSTANT IDENTIFIER SEMI_COLON
rule 8    statement -> OUTPUT expression SEMI_COLON
rule 9    statement -> conditional_statement
rule 10   statement -> loop_statement
rule 11   datatype -> CHAR_TYPE
rule 12   datatype -> INT_TYPE
rule 13   datatype -> WORD_TYPE
rule 14   datatype -> SENTENCE_TYPE
rule 15   declaration -> datatype IDENTIFIER SEMI_COLON
rule 16   @2 ->		/* empty */
rule 17   declaration -> datatype IDENTIFIER @2 assignment SEMI_COLON
rule 24   expression -> OPEN_PAREN expression CLOSE_PAREN
rule 25   expression -> expression arthop expression
rule 26   expression -> value
rule 27   assignment -> EQUAL expression
rule 28   value -> INT_CONSTANT
rule 29   value -> CHAR_CONSTANT
rule 30   value -> WORD_CONSTANT
rule 31   value -> SENTENCE_CONSTANT
rule 32   value -> IDENTIFIER
rule 33   value -> TRUE
rule 34   value -> FALSE
rule 35   conditional_statement -> if_clause
rule 36   conditional_statement -> if_clause else_clause
rule 37   @3 ->		/* empty */
rule 38   @4 ->		/* empty */
rule 39   if_clause -> IF OPEN_PAREN condition CLOSE_PAREN @3 OPEN_BRACKET @4 statement_list CLOSE_BRACKET
rule 40   @5 ->		/* empty */
rule 41   if_clause -> IF OPEN_PAREN condition CLOSE_PAREN @5 statement
rule 42   @6 ->		/* empty */
rule 43   else_clause -> ELSE @6 statement
rule 44   @7 ->		/* empty */
rule 45   @8 ->		/* empty */
rule 46   else_clause -> ELSE @7 OPEN_BRACKET @8 statement_list CLOSE_BRACKET
rule 47   condition -> value
rule 48   condition -> expression relop expression
rule 49   condition -> NOT condition
rule 50   condition -> expression
rule 51   relop -> LE
rule 52   relop -> GE
rule 53   relop -> EQ
rule 54   relop -> NE
rule 55   relop -> GT
rule 56   relop -> LT
rule 57   relop -> NOT
rule 58   arthop -> ADD
rule 59   arthop -> CONCAT
rule 60   arthop -> REMOVE
rule 61   arthop -> GET
rule 62   @9 ->		/* empty */
rule 63   loop_statement -> LOOP OPEN_PAREN condition CLOSE_PAREN @9 OPEN_BRACKET statement_list CLOSE_BRACKET
rule 64   @10 ->		/* empty */
rule 65   loop_statement -> LOOP OPEN_PAREN condition CLOSE_PAREN @10 statement
rule 66   @11 ->		/* empty */
rule 67   loop_statement -> WHILE OPEN_PAREN condition CLOSE_PAREN @11 OPEN_BRACKET statement_list CLOSE_BRACKET
rule 68   @12 ->		/* empty */
rule 69   loop_statement -> WHILE OPEN_PAREN condition CLOSE_PAREN @12 statement

Terminals, with rules where they appear

$ (-1)
'(' (40)
')' (41)
error (256)
CHAR_CONSTANT (257) 29
INT_CONSTANT (258) 28
WORD_CONSTANT (259) 30
SENTENCE_CONSTANT (260) 7 31
IDENTIFIER (261) 6 7 15 17 32
CHAR_TYPE (262) 11
INT_TYPE (263) 12
WORD_TYPE (264) 13
SENTENCE_TYPE (265) 14
INPUT (266) 7
OUTPUT (267) 8
LOOP (268) 63 65
IF (269) 39 41
ELSE (270) 43 46
WHILE (271) 67 69
TRUE (272) 33
FALSE (273) 34
ADD (274) 58
REMOVE (275) 60
CONCAT (276) 59
GET (277) 61
LT (278) 56
GT (279) 55
LE (280) 51
GE (281) 52
EQ (282) 53
NE (283) 54
EQUAL (284) 27
NOT (285) 49 57
COMMA (286) 18
SEMI_COLON (287) 6 7 8 15 17 19
OPEN_BRACKET (288) 20 39 46 63 67
CLOSE_BRACKET (289) 21 39 46 63 67
OPEN_PAREN (290) 22 24 39 41 63 65 67 69
CLOSE_PAREN (291) 23 24 39 41 63 65 67 69

Nonterminals, with rules where they appear

program (40)
    on left: 1
statement_list (41)
    on left: 2 3, on right: 1 3 39 46 63 67
statement (42)
    on left: 4 6 7 8 9 10, on right: 2 3 41 43 65 69
@1 (43)
    on left: 5, on right: 6
datatype (44)
    on left: 11 12 13 14, on right: 15 17
declaration (45)
    on left: 15 17, on right: 4
@2 (46)
    on left: 16, on right: 17
expression (47)
    on left: 24 25 26, on right: 8 24 25 27 48 50
assignment (48)
    on left: 27, on right: 6 17
value (49)
    on left: 28 29 30 31 32 33 34, on right: 26 47
conditional_statement (50)
    on left: 35 36, on right: 9
if_clause (51)
    on left: 39 41, on right: 35 36
@3 (52)
    on left: 37, on right: 39
@4 (53)
    on left: 38, on right: 39
@5 (54)
    on left: 40, on right: 41
else_clause (55)
    on left: 43 46, on right: 36
@6 (56)
    on left: 42, on right: 43
@7 (57)
    on left: 44, on right: 46
@8 (58)
    on left: 45, on right: 46
condition (59)
    on left: 47 48 49 50, on right: 39 41 49 63 65 67 69
relop (60)
    on left: 51 52 53 54 55 56 57, on right: 48
arthop (61)
    on left: 58 59 60 61, on right: 25
loop_statement (62)
    on left: 63 65 67 69, on right: 10
@9 (63)
    on left: 62, on right: 63
@10 (64)
    on left: 64, on right: 65
@11 (65)
    on left: 66, on right: 67
@12 (66)
    on left: 68, on right: 69


state 0

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    program	go to state 101
    statement_list	go to state 11
    statement	go to state 12
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 1

    statement  ->  IDENTIFIER . @1 assignment SEMI_COLON   (rule 6)

    $default	reduce using rule 5 (@1)

    @1  	go to state 18



state 2

    datatype  ->  CHAR_TYPE .   (rule 11)

    $default	reduce using rule 11 (datatype)



state 3

    datatype  ->  INT_TYPE .   (rule 12)

    $default	reduce using rule 12 (datatype)



state 4

    datatype  ->  WORD_TYPE .   (rule 13)

    $default	reduce using rule 13 (datatype)



state 5

    datatype  ->  SENTENCE_TYPE .   (rule 14)

    $default	reduce using rule 14 (datatype)



state 6

    statement  ->  INPUT . SENTENCE_CONSTANT IDENTIFIER SEMI_COLON   (rule 7)

    SENTENCE_CONSTANT	shift, and go to state 19



state 7

    statement  ->  OUTPUT . expression SEMI_COLON   (rule 8)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    TRUE	shift, and go to state 25
    FALSE	shift, and go to state 26
    OPEN_PAREN	shift, and go to state 27

    expression	go to state 28
    value	go to state 29



state 8

    loop_statement  ->  LOOP . OPEN_PAREN condition CLOSE_PAREN @9 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 63)
    loop_statement  ->  LOOP . OPEN_PAREN condition CLOSE_PAREN @10 statement   (rule 65)

    OPEN_PAREN	shift, and go to state 30



state 9

    if_clause  ->  IF . OPEN_PAREN condition CLOSE_PAREN @3 OPEN_BRACKET @4 statement_list CLOSE_BRACKET   (rule 39)
    if_clause  ->  IF . OPEN_PAREN condition CLOSE_PAREN @5 statement   (rule 41)

    OPEN_PAREN	shift, and go to state 31



state 10

    loop_statement  ->  WHILE . OPEN_PAREN condition CLOSE_PAREN @11 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 67)
    loop_statement  ->  WHILE . OPEN_PAREN condition CLOSE_PAREN @12 statement   (rule 69)

    OPEN_PAREN	shift, and go to state 32



state 11

    program  ->  statement_list .   (rule 1)
    statement_list  ->  statement_list . statement   (rule 3)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    $default	reduce using rule 1 (program)

    statement	go to state 33
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 12

    statement_list  ->  statement .   (rule 2)

    $default	reduce using rule 2 (statement_list)



state 13

    declaration  ->  datatype . IDENTIFIER SEMI_COLON   (rule 15)
    declaration  ->  datatype . IDENTIFIER @2 assignment SEMI_COLON   (rule 17)

    IDENTIFIER	shift, and go to state 34



state 14

    statement  ->  declaration .   (rule 4)

    $default	reduce using rule 4 (statement)



state 15

    statement  ->  conditional_statement .   (rule 9)

    $default	reduce using rule 9 (statement)



state 16

    conditional_statement  ->  if_clause .   (rule 35)
    conditional_statement  ->  if_clause . else_clause   (rule 36)

    ELSE	shift, and go to state 35

    ELSE	[reduce using rule 35 (conditional_statement)]
    $default	reduce using rule 35 (conditional_statement)

    else_clause	go to state 36



state 17

    statement  ->  loop_statement .   (rule 10)

    $default	reduce using rule 10 (statement)



state 18

    statement  ->  IDENTIFIER @1 . assignment SEMI_COLON   (rule 6)

    EQUAL	shift, and go to state 37

    assignment	go to state 38



state 19

    statement  ->  INPUT SENTENCE_CONSTANT . IDENTIFIER SEMI_COLON   (rule 7)

    IDENTIFIER	shift, and go to state 39



state 20

    value  ->  CHAR_CONSTANT .   (rule 29)

    $default	reduce using rule 29 (value)



state 21

    value  ->  INT_CONSTANT .   (rule 28)

    $default	reduce using rule 28 (value)



state 22

    value  ->  WORD_CONSTANT .   (rule 30)

    $default	reduce using rule 30 (value)



state 23

    value  ->  SENTENCE_CONSTANT .   (rule 31)

    $default	reduce using rule 31 (value)



state 24

    value  ->  IDENTIFIER .   (rule 32)

    $default	reduce using rule 32 (value)



state 25

    value  ->  TRUE .   (rule 33)

    $default	reduce using rule 33 (value)



state 26

    value  ->  FALSE .   (rule 34)

    $default	reduce using rule 34 (value)



state 27

    expression  ->  OPEN_PAREN . expression CLOSE_PAREN   (rule 24)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    TRUE	shift, and go to state 25
    FALSE	shift, and go to state 26
    OPEN_PAREN	shift, and go to state 27

    expression	go to state 40
    value	go to state 29



state 28

    statement  ->  OUTPUT expression . SEMI_COLON   (rule 8)
    expression  ->  expression . arthop expression   (rule 25)

    ADD 	shift, and go to state 41
    REMOVE	shift, and go to state 42
    CONCAT	shift, and go to state 43
    GET 	shift, and go to state 44
    SEMI_COLON	shift, and go to state 45

    arthop	go to state 46



state 29

    expression  ->  value .   (rule 26)

    $default	reduce using rule 26 (expression)



state 30

    loop_statement  ->  LOOP OPEN_PAREN . condition CLOSE_PAREN @9 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 63)
    loop_statement  ->  LOOP OPEN_PAREN . condition CLOSE_PAREN @10 statement   (rule 65)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    TRUE	shift, and go to state 25
    FALSE	shift, and go to state 26
    NOT 	shift, and go to state 47
    OPEN_PAREN	shift, and go to state 27

    expression	go to state 48
    value	go to state 49
    condition	go to state 50



state 31

    if_clause  ->  IF OPEN_PAREN . condition CLOSE_PAREN @3 OPEN_BRACKET @4 statement_list CLOSE_BRACKET   (rule 39)
    if_clause  ->  IF OPEN_PAREN . condition CLOSE_PAREN @5 statement   (rule 41)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    TRUE	shift, and go to state 25
    FALSE	shift, and go to state 26
    NOT 	shift, and go to state 47
    OPEN_PAREN	shift, and go to state 27

    expression	go to state 48
    value	go to state 49
    condition	go to state 51



state 32

    loop_statement  ->  WHILE OPEN_PAREN . condition CLOSE_PAREN @11 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 67)
    loop_statement  ->  WHILE OPEN_PAREN . condition CLOSE_PAREN @12 statement   (rule 69)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    TRUE	shift, and go to state 25
    FALSE	shift, and go to state 26
    NOT 	shift, and go to state 47
    OPEN_PAREN	shift, and go to state 27

    expression	go to state 48
    value	go to state 49
    condition	go to state 52



state 33

    statement_list  ->  statement_list statement .   (rule 3)

    $default	reduce using rule 3 (statement_list)



state 34

    declaration  ->  datatype IDENTIFIER . SEMI_COLON   (rule 15)
    declaration  ->  datatype IDENTIFIER . @2 assignment SEMI_COLON   (rule 17)

    SEMI_COLON	shift, and go to state 53

    $default	reduce using rule 16 (@2)

    @2  	go to state 54



state 35

    else_clause  ->  ELSE . @6 statement   (rule 43)
    else_clause  ->  ELSE . @7 OPEN_BRACKET @8 statement_list CLOSE_BRACKET   (rule 46)

    OPEN_BRACKET	reduce using rule 44 (@7)
    $default	reduce using rule 42 (@6)

    @6  	go to state 55
    @7  	go to state 56



state 36

    conditional_statement  ->  if_clause else_clause .   (rule 36)

    $default	reduce using rule 36 (conditional_statement)



state 37

    assignment  ->  EQUAL . expression   (rule 27)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    TRUE	shift, and go to state 25
    FALSE	shift, and go to state 26
    OPEN_PAREN	shift, and go to state 27

    expression	go to state 57
    value	go to state 29



state 38

    statement  ->  IDENTIFIER @1 assignment . SEMI_COLON   (rule 6)

    SEMI_COLON	shift, and go to state 58



state 39

    statement  ->  INPUT SENTENCE_CONSTANT IDENTIFIER . SEMI_COLON   (rule 7)

    SEMI_COLON	shift, and go to state 59



state 40

    expression  ->  OPEN_PAREN expression . CLOSE_PAREN   (rule 24)
    expression  ->  expression . arthop expression   (rule 25)

    ADD 	shift, and go to state 41
    REMOVE	shift, and go to state 42
    CONCAT	shift, and go to state 43
    GET 	shift, and go to state 44
    CLOSE_PAREN	shift, and go to state 60

    arthop	go to state 46



state 41

    arthop  ->  ADD .   (rule 58)

    $default	reduce using rule 58 (arthop)



state 42

    arthop  ->  REMOVE .   (rule 60)

    $default	reduce using rule 60 (arthop)



state 43

    arthop  ->  CONCAT .   (rule 59)

    $default	reduce using rule 59 (arthop)



state 44

    arthop  ->  GET .   (rule 61)

    $default	reduce using rule 61 (arthop)



state 45

    statement  ->  OUTPUT expression SEMI_COLON .   (rule 8)

    $default	reduce using rule 8 (statement)



state 46

    expression  ->  expression arthop . expression   (rule 25)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    TRUE	shift, and go to state 25
    FALSE	shift, and go to state 26
    OPEN_PAREN	shift, and go to state 27

    expression	go to state 61
    value	go to state 29



state 47

    condition  ->  NOT . condition   (rule 49)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    TRUE	shift, and go to state 25
    FALSE	shift, and go to state 26
    NOT 	shift, and go to state 47
    OPEN_PAREN	shift, and go to state 27

    expression	go to state 48
    value	go to state 49
    condition	go to state 62



state 48

    expression  ->  expression . arthop expression   (rule 25)
    condition  ->  expression . relop expression   (rule 48)
    condition  ->  expression .   (rule 50)

    ADD 	shift, and go to state 41
    REMOVE	shift, and go to state 42
    CONCAT	shift, and go to state 43
    GET 	shift, and go to state 44
    LT  	shift, and go to state 63
    GT  	shift, and go to state 64
    LE  	shift, and go to state 65
    GE  	shift, and go to state 66
    EQ  	shift, and go to state 67
    NE  	shift, and go to state 68
    NOT 	shift, and go to state 69

    $default	reduce using rule 50 (condition)

    relop	go to state 70
    arthop	go to state 46



state 49

    expression  ->  value .   (rule 26)
    condition  ->  value .   (rule 47)

    CLOSE_PAREN	reduce using rule 26 (expression)
    CLOSE_PAREN	[reduce using rule 47 (condition)]
    $default	reduce using rule 26 (expression)



state 50

    loop_statement  ->  LOOP OPEN_PAREN condition . CLOSE_PAREN @9 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 63)
    loop_statement  ->  LOOP OPEN_PAREN condition . CLOSE_PAREN @10 statement   (rule 65)

    CLOSE_PAREN	shift, and go to state 71



state 51

    if_clause  ->  IF OPEN_PAREN condition . CLOSE_PAREN @3 OPEN_BRACKET @4 statement_list CLOSE_BRACKET   (rule 39)
    if_clause  ->  IF OPEN_PAREN condition . CLOSE_PAREN @5 statement   (rule 41)

    CLOSE_PAREN	shift, and go to state 72



state 52

    loop_statement  ->  WHILE OPEN_PAREN condition . CLOSE_PAREN @11 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 67)
    loop_statement  ->  WHILE OPEN_PAREN condition . CLOSE_PAREN @12 statement   (rule 69)

    CLOSE_PAREN	shift, and go to state 73



state 53

    declaration  ->  datatype IDENTIFIER SEMI_COLON .   (rule 15)

    $default	reduce using rule 15 (declaration)



state 54

    declaration  ->  datatype IDENTIFIER @2 . assignment SEMI_COLON   (rule 17)

    EQUAL	shift, and go to state 37

    assignment	go to state 74



state 55

    else_clause  ->  ELSE @6 . statement   (rule 43)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement	go to state 75
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 56

    else_clause  ->  ELSE @7 . OPEN_BRACKET @8 statement_list CLOSE_BRACKET   (rule 46)

    OPEN_BRACKET	shift, and go to state 76



state 57

    expression  ->  expression . arthop expression   (rule 25)
    assignment  ->  EQUAL expression .   (rule 27)

    ADD 	shift, and go to state 41
    REMOVE	shift, and go to state 42
    CONCAT	shift, and go to state 43
    GET 	shift, and go to state 44

    $default	reduce using rule 27 (assignment)

    arthop	go to state 46



state 58

    statement  ->  IDENTIFIER @1 assignment SEMI_COLON .   (rule 6)

    $default	reduce using rule 6 (statement)



state 59

    statement  ->  INPUT SENTENCE_CONSTANT IDENTIFIER SEMI_COLON .   (rule 7)

    $default	reduce using rule 7 (statement)



state 60

    expression  ->  OPEN_PAREN expression CLOSE_PAREN .   (rule 24)

    $default	reduce using rule 24 (expression)



state 61

    expression  ->  expression . arthop expression   (rule 25)
    expression  ->  expression arthop expression .   (rule 25)

    ADD 	shift, and go to state 41
    REMOVE	shift, and go to state 42
    CONCAT	shift, and go to state 43
    GET 	shift, and go to state 44

    ADD 	[reduce using rule 25 (expression)]
    REMOVE	[reduce using rule 25 (expression)]
    CONCAT	[reduce using rule 25 (expression)]
    GET 	[reduce using rule 25 (expression)]
    $default	reduce using rule 25 (expression)

    arthop	go to state 46



state 62

    condition  ->  NOT condition .   (rule 49)

    $default	reduce using rule 49 (condition)



state 63

    relop  ->  LT .   (rule 56)

    $default	reduce using rule 56 (relop)



state 64

    relop  ->  GT .   (rule 55)

    $default	reduce using rule 55 (relop)



state 65

    relop  ->  LE .   (rule 51)

    $default	reduce using rule 51 (relop)



state 66

    relop  ->  GE .   (rule 52)

    $default	reduce using rule 52 (relop)



state 67

    relop  ->  EQ .   (rule 53)

    $default	reduce using rule 53 (relop)



state 68

    relop  ->  NE .   (rule 54)

    $default	reduce using rule 54 (relop)



state 69

    relop  ->  NOT .   (rule 57)

    $default	reduce using rule 57 (relop)



state 70

    condition  ->  expression relop . expression   (rule 48)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    TRUE	shift, and go to state 25
    FALSE	shift, and go to state 26
    OPEN_PAREN	shift, and go to state 27

    expression	go to state 77
    value	go to state 29



state 71

    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN . @9 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 63)
    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN . @10 statement   (rule 65)

    OPEN_BRACKET	reduce using rule 62 (@9)
    $default	reduce using rule 64 (@10)

    @9  	go to state 78
    @10 	go to state 79



state 72

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN . @3 OPEN_BRACKET @4 statement_list CLOSE_BRACKET   (rule 39)
    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN . @5 statement   (rule 41)

    OPEN_BRACKET	reduce using rule 37 (@3)
    $default	reduce using rule 40 (@5)

    @3  	go to state 80
    @5  	go to state 81



state 73

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN . @11 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 67)
    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN . @12 statement   (rule 69)

    OPEN_BRACKET	reduce using rule 66 (@11)
    $default	reduce using rule 68 (@12)

    @11 	go to state 82
    @12 	go to state 83



state 74

    declaration  ->  datatype IDENTIFIER @2 assignment . SEMI_COLON   (rule 17)

    SEMI_COLON	shift, and go to state 84



state 75

    else_clause  ->  ELSE @6 statement .   (rule 43)

    $default	reduce using rule 43 (else_clause)



state 76

    else_clause  ->  ELSE @7 OPEN_BRACKET . @8 statement_list CLOSE_BRACKET   (rule 46)

    $default	reduce using rule 45 (@8)

    @8  	go to state 85



state 77

    expression  ->  expression . arthop expression   (rule 25)
    condition  ->  expression relop expression .   (rule 48)

    ADD 	shift, and go to state 41
    REMOVE	shift, and go to state 42
    CONCAT	shift, and go to state 43
    GET 	shift, and go to state 44

    $default	reduce using rule 48 (condition)

    arthop	go to state 46



state 78

    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN @9 . OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 63)

    OPEN_BRACKET	shift, and go to state 86



state 79

    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN @10 . statement   (rule 65)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement	go to state 87
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 80

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @3 . OPEN_BRACKET @4 statement_list CLOSE_BRACKET   (rule 39)

    OPEN_BRACKET	shift, and go to state 88



state 81

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @5 . statement   (rule 41)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement	go to state 89
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 82

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @11 . OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 67)

    OPEN_BRACKET	shift, and go to state 90



state 83

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @12 . statement   (rule 69)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement	go to state 91
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 84

    declaration  ->  datatype IDENTIFIER @2 assignment SEMI_COLON .   (rule 17)

    $default	reduce using rule 17 (declaration)



state 85

    else_clause  ->  ELSE @7 OPEN_BRACKET @8 . statement_list CLOSE_BRACKET   (rule 46)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement_list	go to state 92
    statement	go to state 12
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 86

    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN @9 OPEN_BRACKET . statement_list CLOSE_BRACKET   (rule 63)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement_list	go to state 93
    statement	go to state 12
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 87

    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN @10 statement .   (rule 65)

    $default	reduce using rule 65 (loop_statement)



state 88

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @3 OPEN_BRACKET . @4 statement_list CLOSE_BRACKET   (rule 39)

    $default	reduce using rule 38 (@4)

    @4  	go to state 94



state 89

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @5 statement .   (rule 41)

    $default	reduce using rule 41 (if_clause)



state 90

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @11 OPEN_BRACKET . statement_list CLOSE_BRACKET   (rule 67)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement_list	go to state 95
    statement	go to state 12
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 91

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @12 statement .   (rule 69)

    $default	reduce using rule 69 (loop_statement)



state 92

    statement_list  ->  statement_list . statement   (rule 3)
    else_clause  ->  ELSE @7 OPEN_BRACKET @8 statement_list . CLOSE_BRACKET   (rule 46)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10
    CLOSE_BRACKET	shift, and go to state 96

    statement	go to state 33
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 93

    statement_list  ->  statement_list . statement   (rule 3)
    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN @9 OPEN_BRACKET statement_list . CLOSE_BRACKET   (rule 63)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10
    CLOSE_BRACKET	shift, and go to state 97

    statement	go to state 33
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 94

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @3 OPEN_BRACKET @4 . statement_list CLOSE_BRACKET   (rule 39)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement_list	go to state 98
    statement	go to state 12
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 95

    statement_list  ->  statement_list . statement   (rule 3)
    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @11 OPEN_BRACKET statement_list . CLOSE_BRACKET   (rule 67)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10
    CLOSE_BRACKET	shift, and go to state 99

    statement	go to state 33
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 96

    else_clause  ->  ELSE @7 OPEN_BRACKET @8 statement_list CLOSE_BRACKET .   (rule 46)

    $default	reduce using rule 46 (else_clause)



state 97

    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN @9 OPEN_BRACKET statement_list CLOSE_BRACKET .   (rule 63)

    $default	reduce using rule 63 (loop_statement)



state 98

    statement_list  ->  statement_list . statement   (rule 3)
    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @3 OPEN_BRACKET @4 statement_list . CLOSE_BRACKET   (rule 39)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10
    CLOSE_BRACKET	shift, and go to state 100

    statement	go to state 33
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 99

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @11 OPEN_BRACKET statement_list CLOSE_BRACKET .   (rule 67)

    $default	reduce using rule 67 (loop_statement)



state 100

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @3 OPEN_BRACKET @4 statement_list CLOSE_BRACKET .   (rule 39)

    $default	reduce using rule 39 (if_clause)



state 101

    $   	go to state 102



state 102

    $   	go to state 103



state 103

    $default	accept
