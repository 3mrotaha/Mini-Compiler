Useless nonterminals:

   punctuatuion


Terminals which are not used:

   '('
   ')'


Useless rules:

#23    punctuatuion :	 COMMA;
#24    punctuatuion :	 SEMI_COLON;
#25    punctuatuion :	 OPEN_BRACKET;
#26    punctuatuion :	 CLOSE_BRACKET;
#27    punctuatuion :	 OPEN_PAREN;
#28    punctuatuion :	 CLOSE_PAREN;


State 1 contains 1 reduce/reduce conflict.
State 16 contains 1 shift/reduce conflict.
State 66 contains 4 shift/reduce conflicts.

Grammar
rule 1    program -> statement_list
rule 2    statement_list -> statement
rule 3    statement_list -> statement_list statement
rule 4    statement -> declaration
rule 5    @1 ->		/* empty */
rule 6    statement -> IDENTIFIER @1 assignment SEMI_COLON
rule 7    statement -> INPUT SENTENCE_CONSTANT IDENTIFIER SEMI_COLON
rule 8    statement -> OUTPUT expression SEMI_COLON
rule 9    statement -> conditional_statement
rule 10   statement -> loop_statement
rule 11   datatype -> CHAR_TYPE
rule 12   datatype -> INT_TYPE
rule 13   datatype -> WORD_TYPE
rule 14   datatype -> SENTENCE_TYPE
rule 15   declaration -> datatype IDENTIFIER SEMI_COLON
rule 16   declaration -> datatype IDENTIFIER COMMA
rule 17   @2 ->		/* empty */
rule 18   declaration -> datatype IDENTIFIER @2 assignment SEMI_COLON
rule 19   declaration -> IDENTIFIER COMMA
rule 20   @3 ->		/* empty */
rule 21   declaration -> IDENTIFIER @3 assignment SEMI_COLON
rule 22   declaration -> IDENTIFIER SEMI_COLON
rule 29   expression -> OPEN_PAREN expression CLOSE_PAREN
rule 30   expression -> expression arthop expression
rule 31   expression -> value
rule 32   assignment -> EQUAL expression
rule 33   value -> INT_CONSTANT
rule 34   value -> CHAR_CONSTANT
rule 35   value -> WORD_CONSTANT
rule 36   value -> SENTENCE_CONSTANT
rule 37   value -> IDENTIFIER
rule 38   value -> TRUE
rule 39   value -> FALSE
rule 40   conditional_statement -> if_clause
rule 41   conditional_statement -> if_clause else_clause
rule 42   @4 ->		/* empty */
rule 43   @5 ->		/* empty */
rule 44   if_clause -> IF OPEN_PAREN condition CLOSE_PAREN @4 OPEN_BRACKET @5 statement_list CLOSE_BRACKET
rule 45   @6 ->		/* empty */
rule 46   if_clause -> IF OPEN_PAREN condition CLOSE_PAREN @6 statement
rule 47   @7 ->		/* empty */
rule 48   else_clause -> ELSE @7 statement
rule 49   @8 ->		/* empty */
rule 50   @9 ->		/* empty */
rule 51   else_clause -> ELSE @8 OPEN_BRACKET @9 statement_list CLOSE_BRACKET
rule 52   condition -> expression relop expression
rule 53   condition -> NOT condition
rule 54   condition -> expression
rule 55   relop -> LE
rule 56   relop -> GE
rule 57   relop -> EQ
rule 58   relop -> NE
rule 59   relop -> GT
rule 60   relop -> LT
rule 61   relop -> NOT
rule 62   arthop -> ADD
rule 63   arthop -> CONCAT
rule 64   arthop -> REMOVE
rule 65   arthop -> GET
rule 66   @10 ->		/* empty */
rule 67   loop_statement -> LOOP OPEN_PAREN condition CLOSE_PAREN @10 OPEN_BRACKET statement_list CLOSE_BRACKET
rule 68   @11 ->		/* empty */
rule 69   loop_statement -> LOOP OPEN_PAREN condition CLOSE_PAREN @11 statement
rule 70   @12 ->		/* empty */
rule 71   loop_statement -> WHILE OPEN_PAREN condition CLOSE_PAREN @12 OPEN_BRACKET statement_list CLOSE_BRACKET
rule 72   @13 ->		/* empty */
rule 73   loop_statement -> WHILE OPEN_PAREN condition CLOSE_PAREN @13 statement

Terminals, with rules where they appear

$ (-1)
'(' (40)
')' (41)
error (256)
CHAR_CONSTANT (257) 34
INT_CONSTANT (258) 33
WORD_CONSTANT (259) 35
SENTENCE_CONSTANT (260) 7 36
IDENTIFIER (261) 6 7 15 16 18 19 21 22 37
CHAR_TYPE (262) 11
INT_TYPE (263) 12
WORD_TYPE (264) 13
SENTENCE_TYPE (265) 14
INPUT (266) 7
OUTPUT (267) 8
LOOP (268) 67 69
IF (269) 44 46
ELSE (270) 48 51
WHILE (271) 71 73
TRUE (272) 38
FALSE (273) 39
ADD (274) 62
REMOVE (275) 64
CONCAT (276) 63
GET (277) 65
LT (278) 60
GT (279) 59
LE (280) 55
GE (281) 56
EQ (282) 57
NE (283) 58
EQUAL (284) 32
NOT (285) 53 61
COMMA (286) 16 19 23
SEMI_COLON (287) 6 7 8 15 18 21 22 24
OPEN_BRACKET (288) 25 44 51 67 71
CLOSE_BRACKET (289) 26 44 51 67 71
OPEN_PAREN (290) 27 29 44 46 67 69 71 73
CLOSE_PAREN (291) 28 29 44 46 67 69 71 73

Nonterminals, with rules where they appear

program (40)
    on left: 1
statement_list (41)
    on left: 2 3, on right: 1 3 44 51 67 71
statement (42)
    on left: 4 6 7 8 9 10, on right: 2 3 46 48 69 73
@1 (43)
    on left: 5, on right: 6
datatype (44)
    on left: 11 12 13 14, on right: 15 16 18
declaration (45)
    on left: 15 16 18 19 21 22, on right: 4
@2 (46)
    on left: 17, on right: 18
@3 (47)
    on left: 20, on right: 21
expression (48)
    on left: 29 30 31, on right: 8 29 30 32 52 54
assignment (49)
    on left: 32, on right: 6 18 21
value (50)
    on left: 33 34 35 36 37 38 39, on right: 31
conditional_statement (51)
    on left: 40 41, on right: 9
if_clause (52)
    on left: 44 46, on right: 40 41
@4 (53)
    on left: 42, on right: 44
@5 (54)
    on left: 43, on right: 44
@6 (55)
    on left: 45, on right: 46
else_clause (56)
    on left: 48 51, on right: 41
@7 (57)
    on left: 47, on right: 48
@8 (58)
    on left: 49, on right: 51
@9 (59)
    on left: 50, on right: 51
condition (60)
    on left: 52 53 54, on right: 44 46 53 67 69 71 73
relop (61)
    on left: 55 56 57 58 59 60 61, on right: 52
arthop (62)
    on left: 62 63 64 65, on right: 30
loop_statement (63)
    on left: 67 69 71 73, on right: 10
@10 (64)
    on left: 66, on right: 67
@11 (65)
    on left: 68, on right: 69
@12 (66)
    on left: 70, on right: 71
@13 (67)
    on left: 72, on right: 73


state 0

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    program	go to state 106
    statement_list	go to state 11
    statement	go to state 12
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 1

    statement  ->  IDENTIFIER . @1 assignment SEMI_COLON   (rule 6)
    declaration  ->  IDENTIFIER . COMMA   (rule 19)
    declaration  ->  IDENTIFIER . @3 assignment SEMI_COLON   (rule 21)
    declaration  ->  IDENTIFIER . SEMI_COLON   (rule 22)

    COMMA	shift, and go to state 18
    SEMI_COLON	shift, and go to state 19

    EQUAL	reduce using rule 5 (@1)
    EQUAL	[reduce using rule 20 (@3)]
    $default	reduce using rule 5 (@1)

    @1  	go to state 20
    @3  	go to state 21



state 2

    datatype  ->  CHAR_TYPE .   (rule 11)

    $default	reduce using rule 11 (datatype)



state 3

    datatype  ->  INT_TYPE .   (rule 12)

    $default	reduce using rule 12 (datatype)



state 4

    datatype  ->  WORD_TYPE .   (rule 13)

    $default	reduce using rule 13 (datatype)



state 5

    datatype  ->  SENTENCE_TYPE .   (rule 14)

    $default	reduce using rule 14 (datatype)



state 6

    statement  ->  INPUT . SENTENCE_CONSTANT IDENTIFIER SEMI_COLON   (rule 7)

    SENTENCE_CONSTANT	shift, and go to state 22



state 7

    statement  ->  OUTPUT . expression SEMI_COLON   (rule 8)

    CHAR_CONSTANT	shift, and go to state 23
    INT_CONSTANT	shift, and go to state 24
    WORD_CONSTANT	shift, and go to state 25
    SENTENCE_CONSTANT	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TRUE	shift, and go to state 28
    FALSE	shift, and go to state 29
    OPEN_PAREN	shift, and go to state 30

    expression	go to state 31
    value	go to state 32



state 8

    loop_statement  ->  LOOP . OPEN_PAREN condition CLOSE_PAREN @10 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 67)
    loop_statement  ->  LOOP . OPEN_PAREN condition CLOSE_PAREN @11 statement   (rule 69)

    OPEN_PAREN	shift, and go to state 33



state 9

    if_clause  ->  IF . OPEN_PAREN condition CLOSE_PAREN @4 OPEN_BRACKET @5 statement_list CLOSE_BRACKET   (rule 44)
    if_clause  ->  IF . OPEN_PAREN condition CLOSE_PAREN @6 statement   (rule 46)

    OPEN_PAREN	shift, and go to state 34



state 10

    loop_statement  ->  WHILE . OPEN_PAREN condition CLOSE_PAREN @12 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 71)
    loop_statement  ->  WHILE . OPEN_PAREN condition CLOSE_PAREN @13 statement   (rule 73)

    OPEN_PAREN	shift, and go to state 35



state 11

    program  ->  statement_list .   (rule 1)
    statement_list  ->  statement_list . statement   (rule 3)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    $default	reduce using rule 1 (program)

    statement	go to state 36
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 12

    statement_list  ->  statement .   (rule 2)

    $default	reduce using rule 2 (statement_list)



state 13

    declaration  ->  datatype . IDENTIFIER SEMI_COLON   (rule 15)
    declaration  ->  datatype . IDENTIFIER COMMA   (rule 16)
    declaration  ->  datatype . IDENTIFIER @2 assignment SEMI_COLON   (rule 18)

    IDENTIFIER	shift, and go to state 37



state 14

    statement  ->  declaration .   (rule 4)

    $default	reduce using rule 4 (statement)



state 15

    statement  ->  conditional_statement .   (rule 9)

    $default	reduce using rule 9 (statement)



state 16

    conditional_statement  ->  if_clause .   (rule 40)
    conditional_statement  ->  if_clause . else_clause   (rule 41)

    ELSE	shift, and go to state 38

    ELSE	[reduce using rule 40 (conditional_statement)]
    $default	reduce using rule 40 (conditional_statement)

    else_clause	go to state 39



state 17

    statement  ->  loop_statement .   (rule 10)

    $default	reduce using rule 10 (statement)



state 18

    declaration  ->  IDENTIFIER COMMA .   (rule 19)

    $default	reduce using rule 19 (declaration)



state 19

    declaration  ->  IDENTIFIER SEMI_COLON .   (rule 22)

    $default	reduce using rule 22 (declaration)



state 20

    statement  ->  IDENTIFIER @1 . assignment SEMI_COLON   (rule 6)

    EQUAL	shift, and go to state 40

    assignment	go to state 41



state 21

    declaration  ->  IDENTIFIER @3 . assignment SEMI_COLON   (rule 21)

    EQUAL	shift, and go to state 40

    assignment	go to state 42



state 22

    statement  ->  INPUT SENTENCE_CONSTANT . IDENTIFIER SEMI_COLON   (rule 7)

    IDENTIFIER	shift, and go to state 43



state 23

    value  ->  CHAR_CONSTANT .   (rule 34)

    $default	reduce using rule 34 (value)



state 24

    value  ->  INT_CONSTANT .   (rule 33)

    $default	reduce using rule 33 (value)



state 25

    value  ->  WORD_CONSTANT .   (rule 35)

    $default	reduce using rule 35 (value)



state 26

    value  ->  SENTENCE_CONSTANT .   (rule 36)

    $default	reduce using rule 36 (value)



state 27

    value  ->  IDENTIFIER .   (rule 37)

    $default	reduce using rule 37 (value)



state 28

    value  ->  TRUE .   (rule 38)

    $default	reduce using rule 38 (value)



state 29

    value  ->  FALSE .   (rule 39)

    $default	reduce using rule 39 (value)



state 30

    expression  ->  OPEN_PAREN . expression CLOSE_PAREN   (rule 29)

    CHAR_CONSTANT	shift, and go to state 23
    INT_CONSTANT	shift, and go to state 24
    WORD_CONSTANT	shift, and go to state 25
    SENTENCE_CONSTANT	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TRUE	shift, and go to state 28
    FALSE	shift, and go to state 29
    OPEN_PAREN	shift, and go to state 30

    expression	go to state 44
    value	go to state 32



state 31

    statement  ->  OUTPUT expression . SEMI_COLON   (rule 8)
    expression  ->  expression . arthop expression   (rule 30)

    ADD 	shift, and go to state 45
    REMOVE	shift, and go to state 46
    CONCAT	shift, and go to state 47
    GET 	shift, and go to state 48
    SEMI_COLON	shift, and go to state 49

    arthop	go to state 50



state 32

    expression  ->  value .   (rule 31)

    $default	reduce using rule 31 (expression)



state 33

    loop_statement  ->  LOOP OPEN_PAREN . condition CLOSE_PAREN @10 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 67)
    loop_statement  ->  LOOP OPEN_PAREN . condition CLOSE_PAREN @11 statement   (rule 69)

    CHAR_CONSTANT	shift, and go to state 23
    INT_CONSTANT	shift, and go to state 24
    WORD_CONSTANT	shift, and go to state 25
    SENTENCE_CONSTANT	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TRUE	shift, and go to state 28
    FALSE	shift, and go to state 29
    NOT 	shift, and go to state 51
    OPEN_PAREN	shift, and go to state 30

    expression	go to state 52
    value	go to state 32
    condition	go to state 53



state 34

    if_clause  ->  IF OPEN_PAREN . condition CLOSE_PAREN @4 OPEN_BRACKET @5 statement_list CLOSE_BRACKET   (rule 44)
    if_clause  ->  IF OPEN_PAREN . condition CLOSE_PAREN @6 statement   (rule 46)

    CHAR_CONSTANT	shift, and go to state 23
    INT_CONSTANT	shift, and go to state 24
    WORD_CONSTANT	shift, and go to state 25
    SENTENCE_CONSTANT	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TRUE	shift, and go to state 28
    FALSE	shift, and go to state 29
    NOT 	shift, and go to state 51
    OPEN_PAREN	shift, and go to state 30

    expression	go to state 52
    value	go to state 32
    condition	go to state 54



state 35

    loop_statement  ->  WHILE OPEN_PAREN . condition CLOSE_PAREN @12 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 71)
    loop_statement  ->  WHILE OPEN_PAREN . condition CLOSE_PAREN @13 statement   (rule 73)

    CHAR_CONSTANT	shift, and go to state 23
    INT_CONSTANT	shift, and go to state 24
    WORD_CONSTANT	shift, and go to state 25
    SENTENCE_CONSTANT	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TRUE	shift, and go to state 28
    FALSE	shift, and go to state 29
    NOT 	shift, and go to state 51
    OPEN_PAREN	shift, and go to state 30

    expression	go to state 52
    value	go to state 32
    condition	go to state 55



state 36

    statement_list  ->  statement_list statement .   (rule 3)

    $default	reduce using rule 3 (statement_list)



state 37

    declaration  ->  datatype IDENTIFIER . SEMI_COLON   (rule 15)
    declaration  ->  datatype IDENTIFIER . COMMA   (rule 16)
    declaration  ->  datatype IDENTIFIER . @2 assignment SEMI_COLON   (rule 18)

    COMMA	shift, and go to state 56
    SEMI_COLON	shift, and go to state 57

    $default	reduce using rule 17 (@2)

    @2  	go to state 58



state 38

    else_clause  ->  ELSE . @7 statement   (rule 48)
    else_clause  ->  ELSE . @8 OPEN_BRACKET @9 statement_list CLOSE_BRACKET   (rule 51)

    OPEN_BRACKET	reduce using rule 49 (@8)
    $default	reduce using rule 47 (@7)

    @7  	go to state 59
    @8  	go to state 60



state 39

    conditional_statement  ->  if_clause else_clause .   (rule 41)

    $default	reduce using rule 41 (conditional_statement)



state 40

    assignment  ->  EQUAL . expression   (rule 32)

    CHAR_CONSTANT	shift, and go to state 23
    INT_CONSTANT	shift, and go to state 24
    WORD_CONSTANT	shift, and go to state 25
    SENTENCE_CONSTANT	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TRUE	shift, and go to state 28
    FALSE	shift, and go to state 29
    OPEN_PAREN	shift, and go to state 30

    expression	go to state 61
    value	go to state 32



state 41

    statement  ->  IDENTIFIER @1 assignment . SEMI_COLON   (rule 6)

    SEMI_COLON	shift, and go to state 62



state 42

    declaration  ->  IDENTIFIER @3 assignment . SEMI_COLON   (rule 21)

    SEMI_COLON	shift, and go to state 63



state 43

    statement  ->  INPUT SENTENCE_CONSTANT IDENTIFIER . SEMI_COLON   (rule 7)

    SEMI_COLON	shift, and go to state 64



state 44

    expression  ->  OPEN_PAREN expression . CLOSE_PAREN   (rule 29)
    expression  ->  expression . arthop expression   (rule 30)

    ADD 	shift, and go to state 45
    REMOVE	shift, and go to state 46
    CONCAT	shift, and go to state 47
    GET 	shift, and go to state 48
    CLOSE_PAREN	shift, and go to state 65

    arthop	go to state 50



state 45

    arthop  ->  ADD .   (rule 62)

    $default	reduce using rule 62 (arthop)



state 46

    arthop  ->  REMOVE .   (rule 64)

    $default	reduce using rule 64 (arthop)



state 47

    arthop  ->  CONCAT .   (rule 63)

    $default	reduce using rule 63 (arthop)



state 48

    arthop  ->  GET .   (rule 65)

    $default	reduce using rule 65 (arthop)



state 49

    statement  ->  OUTPUT expression SEMI_COLON .   (rule 8)

    $default	reduce using rule 8 (statement)



state 50

    expression  ->  expression arthop . expression   (rule 30)

    CHAR_CONSTANT	shift, and go to state 23
    INT_CONSTANT	shift, and go to state 24
    WORD_CONSTANT	shift, and go to state 25
    SENTENCE_CONSTANT	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TRUE	shift, and go to state 28
    FALSE	shift, and go to state 29
    OPEN_PAREN	shift, and go to state 30

    expression	go to state 66
    value	go to state 32



state 51

    condition  ->  NOT . condition   (rule 53)

    CHAR_CONSTANT	shift, and go to state 23
    INT_CONSTANT	shift, and go to state 24
    WORD_CONSTANT	shift, and go to state 25
    SENTENCE_CONSTANT	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TRUE	shift, and go to state 28
    FALSE	shift, and go to state 29
    NOT 	shift, and go to state 51
    OPEN_PAREN	shift, and go to state 30

    expression	go to state 52
    value	go to state 32
    condition	go to state 67



state 52

    expression  ->  expression . arthop expression   (rule 30)
    condition  ->  expression . relop expression   (rule 52)
    condition  ->  expression .   (rule 54)

    ADD 	shift, and go to state 45
    REMOVE	shift, and go to state 46
    CONCAT	shift, and go to state 47
    GET 	shift, and go to state 48
    LT  	shift, and go to state 68
    GT  	shift, and go to state 69
    LE  	shift, and go to state 70
    GE  	shift, and go to state 71
    EQ  	shift, and go to state 72
    NE  	shift, and go to state 73
    NOT 	shift, and go to state 74

    $default	reduce using rule 54 (condition)

    relop	go to state 75
    arthop	go to state 50



state 53

    loop_statement  ->  LOOP OPEN_PAREN condition . CLOSE_PAREN @10 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 67)
    loop_statement  ->  LOOP OPEN_PAREN condition . CLOSE_PAREN @11 statement   (rule 69)

    CLOSE_PAREN	shift, and go to state 76



state 54

    if_clause  ->  IF OPEN_PAREN condition . CLOSE_PAREN @4 OPEN_BRACKET @5 statement_list CLOSE_BRACKET   (rule 44)
    if_clause  ->  IF OPEN_PAREN condition . CLOSE_PAREN @6 statement   (rule 46)

    CLOSE_PAREN	shift, and go to state 77



state 55

    loop_statement  ->  WHILE OPEN_PAREN condition . CLOSE_PAREN @12 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 71)
    loop_statement  ->  WHILE OPEN_PAREN condition . CLOSE_PAREN @13 statement   (rule 73)

    CLOSE_PAREN	shift, and go to state 78



state 56

    declaration  ->  datatype IDENTIFIER COMMA .   (rule 16)

    $default	reduce using rule 16 (declaration)



state 57

    declaration  ->  datatype IDENTIFIER SEMI_COLON .   (rule 15)

    $default	reduce using rule 15 (declaration)



state 58

    declaration  ->  datatype IDENTIFIER @2 . assignment SEMI_COLON   (rule 18)

    EQUAL	shift, and go to state 40

    assignment	go to state 79



state 59

    else_clause  ->  ELSE @7 . statement   (rule 48)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement	go to state 80
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 60

    else_clause  ->  ELSE @8 . OPEN_BRACKET @9 statement_list CLOSE_BRACKET   (rule 51)

    OPEN_BRACKET	shift, and go to state 81



state 61

    expression  ->  expression . arthop expression   (rule 30)
    assignment  ->  EQUAL expression .   (rule 32)

    ADD 	shift, and go to state 45
    REMOVE	shift, and go to state 46
    CONCAT	shift, and go to state 47
    GET 	shift, and go to state 48

    $default	reduce using rule 32 (assignment)

    arthop	go to state 50



state 62

    statement  ->  IDENTIFIER @1 assignment SEMI_COLON .   (rule 6)

    $default	reduce using rule 6 (statement)



state 63

    declaration  ->  IDENTIFIER @3 assignment SEMI_COLON .   (rule 21)

    $default	reduce using rule 21 (declaration)



state 64

    statement  ->  INPUT SENTENCE_CONSTANT IDENTIFIER SEMI_COLON .   (rule 7)

    $default	reduce using rule 7 (statement)



state 65

    expression  ->  OPEN_PAREN expression CLOSE_PAREN .   (rule 29)

    $default	reduce using rule 29 (expression)



state 66

    expression  ->  expression . arthop expression   (rule 30)
    expression  ->  expression arthop expression .   (rule 30)

    ADD 	shift, and go to state 45
    REMOVE	shift, and go to state 46
    CONCAT	shift, and go to state 47
    GET 	shift, and go to state 48

    ADD 	[reduce using rule 30 (expression)]
    REMOVE	[reduce using rule 30 (expression)]
    CONCAT	[reduce using rule 30 (expression)]
    GET 	[reduce using rule 30 (expression)]
    $default	reduce using rule 30 (expression)

    arthop	go to state 50



state 67

    condition  ->  NOT condition .   (rule 53)

    $default	reduce using rule 53 (condition)



state 68

    relop  ->  LT .   (rule 60)

    $default	reduce using rule 60 (relop)



state 69

    relop  ->  GT .   (rule 59)

    $default	reduce using rule 59 (relop)



state 70

    relop  ->  LE .   (rule 55)

    $default	reduce using rule 55 (relop)



state 71

    relop  ->  GE .   (rule 56)

    $default	reduce using rule 56 (relop)



state 72

    relop  ->  EQ .   (rule 57)

    $default	reduce using rule 57 (relop)



state 73

    relop  ->  NE .   (rule 58)

    $default	reduce using rule 58 (relop)



state 74

    relop  ->  NOT .   (rule 61)

    $default	reduce using rule 61 (relop)



state 75

    condition  ->  expression relop . expression   (rule 52)

    CHAR_CONSTANT	shift, and go to state 23
    INT_CONSTANT	shift, and go to state 24
    WORD_CONSTANT	shift, and go to state 25
    SENTENCE_CONSTANT	shift, and go to state 26
    IDENTIFIER	shift, and go to state 27
    TRUE	shift, and go to state 28
    FALSE	shift, and go to state 29
    OPEN_PAREN	shift, and go to state 30

    expression	go to state 82
    value	go to state 32



state 76

    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN . @10 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 67)
    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN . @11 statement   (rule 69)

    OPEN_BRACKET	reduce using rule 66 (@10)
    $default	reduce using rule 68 (@11)

    @10 	go to state 83
    @11 	go to state 84



state 77

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN . @4 OPEN_BRACKET @5 statement_list CLOSE_BRACKET   (rule 44)
    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN . @6 statement   (rule 46)

    OPEN_BRACKET	reduce using rule 42 (@4)
    $default	reduce using rule 45 (@6)

    @4  	go to state 85
    @6  	go to state 86



state 78

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN . @12 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 71)
    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN . @13 statement   (rule 73)

    OPEN_BRACKET	reduce using rule 70 (@12)
    $default	reduce using rule 72 (@13)

    @12 	go to state 87
    @13 	go to state 88



state 79

    declaration  ->  datatype IDENTIFIER @2 assignment . SEMI_COLON   (rule 18)

    SEMI_COLON	shift, and go to state 89



state 80

    else_clause  ->  ELSE @7 statement .   (rule 48)

    $default	reduce using rule 48 (else_clause)



state 81

    else_clause  ->  ELSE @8 OPEN_BRACKET . @9 statement_list CLOSE_BRACKET   (rule 51)

    $default	reduce using rule 50 (@9)

    @9  	go to state 90



state 82

    expression  ->  expression . arthop expression   (rule 30)
    condition  ->  expression relop expression .   (rule 52)

    ADD 	shift, and go to state 45
    REMOVE	shift, and go to state 46
    CONCAT	shift, and go to state 47
    GET 	shift, and go to state 48

    $default	reduce using rule 52 (condition)

    arthop	go to state 50



state 83

    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN @10 . OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 67)

    OPEN_BRACKET	shift, and go to state 91



state 84

    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN @11 . statement   (rule 69)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement	go to state 92
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 85

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @4 . OPEN_BRACKET @5 statement_list CLOSE_BRACKET   (rule 44)

    OPEN_BRACKET	shift, and go to state 93



state 86

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @6 . statement   (rule 46)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement	go to state 94
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 87

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @12 . OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 71)

    OPEN_BRACKET	shift, and go to state 95



state 88

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @13 . statement   (rule 73)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement	go to state 96
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 89

    declaration  ->  datatype IDENTIFIER @2 assignment SEMI_COLON .   (rule 18)

    $default	reduce using rule 18 (declaration)



state 90

    else_clause  ->  ELSE @8 OPEN_BRACKET @9 . statement_list CLOSE_BRACKET   (rule 51)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement_list	go to state 97
    statement	go to state 12
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 91

    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN @10 OPEN_BRACKET . statement_list CLOSE_BRACKET   (rule 67)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement_list	go to state 98
    statement	go to state 12
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 92

    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN @11 statement .   (rule 69)

    $default	reduce using rule 69 (loop_statement)



state 93

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @4 OPEN_BRACKET . @5 statement_list CLOSE_BRACKET   (rule 44)

    $default	reduce using rule 43 (@5)

    @5  	go to state 99



state 94

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @6 statement .   (rule 46)

    $default	reduce using rule 46 (if_clause)



state 95

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @12 OPEN_BRACKET . statement_list CLOSE_BRACKET   (rule 71)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement_list	go to state 100
    statement	go to state 12
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 96

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @13 statement .   (rule 73)

    $default	reduce using rule 73 (loop_statement)



state 97

    statement_list  ->  statement_list . statement   (rule 3)
    else_clause  ->  ELSE @8 OPEN_BRACKET @9 statement_list . CLOSE_BRACKET   (rule 51)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10
    CLOSE_BRACKET	shift, and go to state 101

    statement	go to state 36
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 98

    statement_list  ->  statement_list . statement   (rule 3)
    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN @10 OPEN_BRACKET statement_list . CLOSE_BRACKET   (rule 67)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10
    CLOSE_BRACKET	shift, and go to state 102

    statement	go to state 36
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 99

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @4 OPEN_BRACKET @5 . statement_list CLOSE_BRACKET   (rule 44)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement_list	go to state 103
    statement	go to state 12
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 100

    statement_list  ->  statement_list . statement   (rule 3)
    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @12 OPEN_BRACKET statement_list . CLOSE_BRACKET   (rule 71)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10
    CLOSE_BRACKET	shift, and go to state 104

    statement	go to state 36
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 101

    else_clause  ->  ELSE @8 OPEN_BRACKET @9 statement_list CLOSE_BRACKET .   (rule 51)

    $default	reduce using rule 51 (else_clause)



state 102

    loop_statement  ->  LOOP OPEN_PAREN condition CLOSE_PAREN @10 OPEN_BRACKET statement_list CLOSE_BRACKET .   (rule 67)

    $default	reduce using rule 67 (loop_statement)



state 103

    statement_list  ->  statement_list . statement   (rule 3)
    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @4 OPEN_BRACKET @5 statement_list . CLOSE_BRACKET   (rule 44)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10
    CLOSE_BRACKET	shift, and go to state 105

    statement	go to state 36
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 104

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @12 OPEN_BRACKET statement_list CLOSE_BRACKET .   (rule 71)

    $default	reduce using rule 71 (loop_statement)



state 105

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @4 OPEN_BRACKET @5 statement_list CLOSE_BRACKET .   (rule 44)

    $default	reduce using rule 44 (if_clause)



state 106

    $   	go to state 107



state 107

    $   	go to state 108



state 108

    $default	accept
