Useless nonterminals:

   punctuatuion


Terminals which are not used:

   COMMA
   '('
   ')'


Useless rules:

#18    punctuatuion :	 COMMA;
#19    punctuatuion :	 SEMI_COLON;
#20    punctuatuion :	 OPEN_BRACKET;
#21    punctuatuion :	 CLOSE_BRACKET;
#22    punctuatuion :	 OPEN_PAREN;
#23    punctuatuion :	 CLOSE_PAREN;


State 16 contains 1 shift/reduce conflict.
State 52 contains 1 shift/reduce conflict.
State 61 contains 4 shift/reduce conflicts.

Grammar
rule 1    program -> statement_list
rule 2    statement_list -> statement
rule 3    statement_list -> statement_list statement
rule 4    statement -> declaration
rule 5    @1 ->		/* empty */
rule 6    statement -> IDENTIFIER @1 assignment SEMI_COLON
rule 7    statement -> INPUT SENTENCE_CONSTANT IDENTIFIER SEMI_COLON
rule 8    statement -> OUTPUT expression SEMI_COLON
rule 9    statement -> conditional_statement
rule 10   statement -> loop_statement
rule 11   datatype -> CHAR_TYPE
rule 12   datatype -> INT_TYPE
rule 13   datatype -> WORD_TYPE
rule 14   datatype -> SENTENCE_TYPE
rule 15   declaration -> datatype IDENTIFIER SEMI_COLON
rule 16   @2 ->		/* empty */
rule 17   declaration -> datatype IDENTIFIER @2 assignment SEMI_COLON
rule 24   expression -> OPEN_PAREN expression CLOSE_PAREN
rule 25   expression -> expression arthop expression
rule 26   expression -> value
rule 27   assignment -> EQUAL expression
rule 28   value -> INT_CONSTANT
rule 29   value -> CHAR_CONSTANT
rule 30   value -> WORD_CONSTANT
rule 31   value -> SENTENCE_CONSTANT
rule 32   value -> IDENTIFIER
rule 33   conditional_statement -> if_clause
rule 34   conditional_statement -> if_clause else_clause
rule 35   @3 ->		/* empty */
rule 36   @4 ->		/* empty */
rule 37   if_clause -> IF OPEN_PAREN condition CLOSE_PAREN @3 OPEN_BRACKET @4 statement_list CLOSE_BRACKET
rule 38   @5 ->		/* empty */
rule 39   if_clause -> IF OPEN_PAREN condition CLOSE_PAREN @5 statement
rule 40   @6 ->		/* empty */
rule 41   else_clause -> ELSE @6 statement
rule 42   @7 ->		/* empty */
rule 43   @8 ->		/* empty */
rule 44   else_clause -> ELSE @7 OPEN_BRACKET @8 statement_list CLOSE_BRACKET
rule 45   condition -> value
rule 46   condition -> expression relop expression
rule 47   condition -> NOT condition
rule 48   condition -> TRUE
rule 49   condition -> FALSE
rule 50   relop -> LE
rule 51   relop -> GE
rule 52   relop -> EQ
rule 53   relop -> NE
rule 54   relop -> GT
rule 55   relop -> LT
rule 56   relop -> NOT
rule 57   arthop -> ADD
rule 58   arthop -> CONCAT
rule 59   arthop -> REMOVE
rule 60   arthop -> GET
rule 61   @9 ->		/* empty */
rule 62   loop_statement -> LOOP OPEN_PAREN expression CLOSE_PAREN @9 OPEN_BRACKET statement_list CLOSE_BRACKET
rule 63   @10 ->		/* empty */
rule 64   loop_statement -> LOOP OPEN_PAREN expression CLOSE_PAREN @10 statement
rule 65   @11 ->		/* empty */
rule 66   loop_statement -> WHILE OPEN_PAREN condition CLOSE_PAREN @11 OPEN_BRACKET statement_list CLOSE_BRACKET
rule 67   @12 ->		/* empty */
rule 68   loop_statement -> WHILE OPEN_PAREN condition @12 CLOSE_PAREN statement

Terminals, with rules where they appear

$ (-1)
'(' (40)
')' (41)
error (256)
CHAR_CONSTANT (257) 29
INT_CONSTANT (258) 28
WORD_CONSTANT (259) 30
SENTENCE_CONSTANT (260) 7 31
IDENTIFIER (261) 6 7 15 17 32
CHAR_TYPE (262) 11
INT_TYPE (263) 12
WORD_TYPE (264) 13
SENTENCE_TYPE (265) 14
INPUT (266) 7
OUTPUT (267) 8
LOOP (268) 62 64
IF (269) 37 39
ELSE (270) 41 44
WHILE (271) 66 68
TRUE (272) 48
FALSE (273) 49
ADD (274) 57
REMOVE (275) 59
CONCAT (276) 58
GET (277) 60
LT (278) 55
GT (279) 54
LE (280) 50
GE (281) 51
EQ (282) 52
NE (283) 53
EQUAL (284) 27
NOT (285) 47 56
COMMA (286) 18
SEMI_COLON (287) 6 7 8 15 17 19
OPEN_BRACKET (288) 20 37 44 62 66
CLOSE_BRACKET (289) 21 37 44 62 66
OPEN_PAREN (290) 22 24 37 39 62 64 66 68
CLOSE_PAREN (291) 23 24 37 39 62 64 66 68

Nonterminals, with rules where they appear

program (40)
    on left: 1
statement_list (41)
    on left: 2 3, on right: 1 3 37 44 62 66
statement (42)
    on left: 4 6 7 8 9 10, on right: 2 3 39 41 64 68
@1 (43)
    on left: 5, on right: 6
datatype (44)
    on left: 11 12 13 14, on right: 15 17
declaration (45)
    on left: 15 17, on right: 4
@2 (46)
    on left: 16, on right: 17
expression (47)
    on left: 24 25 26, on right: 8 24 25 27 46 62 64
assignment (48)
    on left: 27, on right: 6 17
value (49)
    on left: 28 29 30 31 32, on right: 26 45
conditional_statement (50)
    on left: 33 34, on right: 9
if_clause (51)
    on left: 37 39, on right: 33 34
@3 (52)
    on left: 35, on right: 37
@4 (53)
    on left: 36, on right: 37
@5 (54)
    on left: 38, on right: 39
else_clause (55)
    on left: 41 44, on right: 34
@6 (56)
    on left: 40, on right: 41
@7 (57)
    on left: 42, on right: 44
@8 (58)
    on left: 43, on right: 44
condition (59)
    on left: 45 46 47 48 49, on right: 37 39 47 66 68
relop (60)
    on left: 50 51 52 53 54 55 56, on right: 46
arthop (61)
    on left: 57 58 59 60, on right: 25
loop_statement (62)
    on left: 62 64 66 68, on right: 10
@9 (63)
    on left: 61, on right: 62
@10 (64)
    on left: 63, on right: 64
@11 (65)
    on left: 65, on right: 66
@12 (66)
    on left: 67, on right: 68


state 0

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    program	go to state 102
    statement_list	go to state 11
    statement	go to state 12
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 1

    statement  ->  IDENTIFIER . @1 assignment SEMI_COLON   (rule 6)

    $default	reduce using rule 5 (@1)

    @1  	go to state 18



state 2

    datatype  ->  CHAR_TYPE .   (rule 11)

    $default	reduce using rule 11 (datatype)



state 3

    datatype  ->  INT_TYPE .   (rule 12)

    $default	reduce using rule 12 (datatype)



state 4

    datatype  ->  WORD_TYPE .   (rule 13)

    $default	reduce using rule 13 (datatype)



state 5

    datatype  ->  SENTENCE_TYPE .   (rule 14)

    $default	reduce using rule 14 (datatype)



state 6

    statement  ->  INPUT . SENTENCE_CONSTANT IDENTIFIER SEMI_COLON   (rule 7)

    SENTENCE_CONSTANT	shift, and go to state 19



state 7

    statement  ->  OUTPUT . expression SEMI_COLON   (rule 8)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    OPEN_PAREN	shift, and go to state 25

    expression	go to state 26
    value	go to state 27



state 8

    loop_statement  ->  LOOP . OPEN_PAREN expression CLOSE_PAREN @9 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 62)
    loop_statement  ->  LOOP . OPEN_PAREN expression CLOSE_PAREN @10 statement   (rule 64)

    OPEN_PAREN	shift, and go to state 28



state 9

    if_clause  ->  IF . OPEN_PAREN condition CLOSE_PAREN @3 OPEN_BRACKET @4 statement_list CLOSE_BRACKET   (rule 37)
    if_clause  ->  IF . OPEN_PAREN condition CLOSE_PAREN @5 statement   (rule 39)

    OPEN_PAREN	shift, and go to state 29



state 10

    loop_statement  ->  WHILE . OPEN_PAREN condition CLOSE_PAREN @11 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 66)
    loop_statement  ->  WHILE . OPEN_PAREN condition @12 CLOSE_PAREN statement   (rule 68)

    OPEN_PAREN	shift, and go to state 30



state 11

    program  ->  statement_list .   (rule 1)
    statement_list  ->  statement_list . statement   (rule 3)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    $default	reduce using rule 1 (program)

    statement	go to state 31
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 12

    statement_list  ->  statement .   (rule 2)

    $default	reduce using rule 2 (statement_list)



state 13

    declaration  ->  datatype . IDENTIFIER SEMI_COLON   (rule 15)
    declaration  ->  datatype . IDENTIFIER @2 assignment SEMI_COLON   (rule 17)

    IDENTIFIER	shift, and go to state 32



state 14

    statement  ->  declaration .   (rule 4)

    $default	reduce using rule 4 (statement)



state 15

    statement  ->  conditional_statement .   (rule 9)

    $default	reduce using rule 9 (statement)



state 16

    conditional_statement  ->  if_clause .   (rule 33)
    conditional_statement  ->  if_clause . else_clause   (rule 34)

    ELSE	shift, and go to state 33

    ELSE	[reduce using rule 33 (conditional_statement)]
    $default	reduce using rule 33 (conditional_statement)

    else_clause	go to state 34



state 17

    statement  ->  loop_statement .   (rule 10)

    $default	reduce using rule 10 (statement)



state 18

    statement  ->  IDENTIFIER @1 . assignment SEMI_COLON   (rule 6)

    EQUAL	shift, and go to state 35

    assignment	go to state 36



state 19

    statement  ->  INPUT SENTENCE_CONSTANT . IDENTIFIER SEMI_COLON   (rule 7)

    IDENTIFIER	shift, and go to state 37



state 20

    value  ->  CHAR_CONSTANT .   (rule 29)

    $default	reduce using rule 29 (value)



state 21

    value  ->  INT_CONSTANT .   (rule 28)

    $default	reduce using rule 28 (value)



state 22

    value  ->  WORD_CONSTANT .   (rule 30)

    $default	reduce using rule 30 (value)



state 23

    value  ->  SENTENCE_CONSTANT .   (rule 31)

    $default	reduce using rule 31 (value)



state 24

    value  ->  IDENTIFIER .   (rule 32)

    $default	reduce using rule 32 (value)



state 25

    expression  ->  OPEN_PAREN . expression CLOSE_PAREN   (rule 24)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    OPEN_PAREN	shift, and go to state 25

    expression	go to state 38
    value	go to state 27



state 26

    statement  ->  OUTPUT expression . SEMI_COLON   (rule 8)
    expression  ->  expression . arthop expression   (rule 25)

    ADD 	shift, and go to state 39
    REMOVE	shift, and go to state 40
    CONCAT	shift, and go to state 41
    GET 	shift, and go to state 42
    SEMI_COLON	shift, and go to state 43

    arthop	go to state 44



state 27

    expression  ->  value .   (rule 26)

    $default	reduce using rule 26 (expression)



state 28

    loop_statement  ->  LOOP OPEN_PAREN . expression CLOSE_PAREN @9 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 62)
    loop_statement  ->  LOOP OPEN_PAREN . expression CLOSE_PAREN @10 statement   (rule 64)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    OPEN_PAREN	shift, and go to state 25

    expression	go to state 45
    value	go to state 27



state 29

    if_clause  ->  IF OPEN_PAREN . condition CLOSE_PAREN @3 OPEN_BRACKET @4 statement_list CLOSE_BRACKET   (rule 37)
    if_clause  ->  IF OPEN_PAREN . condition CLOSE_PAREN @5 statement   (rule 39)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    TRUE	shift, and go to state 46
    FALSE	shift, and go to state 47
    NOT 	shift, and go to state 48
    OPEN_PAREN	shift, and go to state 25

    expression	go to state 49
    value	go to state 50
    condition	go to state 51



state 30

    loop_statement  ->  WHILE OPEN_PAREN . condition CLOSE_PAREN @11 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 66)
    loop_statement  ->  WHILE OPEN_PAREN . condition @12 CLOSE_PAREN statement   (rule 68)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    TRUE	shift, and go to state 46
    FALSE	shift, and go to state 47
    NOT 	shift, and go to state 48
    OPEN_PAREN	shift, and go to state 25

    expression	go to state 49
    value	go to state 50
    condition	go to state 52



state 31

    statement_list  ->  statement_list statement .   (rule 3)

    $default	reduce using rule 3 (statement_list)



state 32

    declaration  ->  datatype IDENTIFIER . SEMI_COLON   (rule 15)
    declaration  ->  datatype IDENTIFIER . @2 assignment SEMI_COLON   (rule 17)

    SEMI_COLON	shift, and go to state 53

    $default	reduce using rule 16 (@2)

    @2  	go to state 54



state 33

    else_clause  ->  ELSE . @6 statement   (rule 41)
    else_clause  ->  ELSE . @7 OPEN_BRACKET @8 statement_list CLOSE_BRACKET   (rule 44)

    OPEN_BRACKET	reduce using rule 42 (@7)
    $default	reduce using rule 40 (@6)

    @6  	go to state 55
    @7  	go to state 56



state 34

    conditional_statement  ->  if_clause else_clause .   (rule 34)

    $default	reduce using rule 34 (conditional_statement)



state 35

    assignment  ->  EQUAL . expression   (rule 27)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    OPEN_PAREN	shift, and go to state 25

    expression	go to state 57
    value	go to state 27



state 36

    statement  ->  IDENTIFIER @1 assignment . SEMI_COLON   (rule 6)

    SEMI_COLON	shift, and go to state 58



state 37

    statement  ->  INPUT SENTENCE_CONSTANT IDENTIFIER . SEMI_COLON   (rule 7)

    SEMI_COLON	shift, and go to state 59



state 38

    expression  ->  OPEN_PAREN expression . CLOSE_PAREN   (rule 24)
    expression  ->  expression . arthop expression   (rule 25)

    ADD 	shift, and go to state 39
    REMOVE	shift, and go to state 40
    CONCAT	shift, and go to state 41
    GET 	shift, and go to state 42
    CLOSE_PAREN	shift, and go to state 60

    arthop	go to state 44



state 39

    arthop  ->  ADD .   (rule 57)

    $default	reduce using rule 57 (arthop)



state 40

    arthop  ->  REMOVE .   (rule 59)

    $default	reduce using rule 59 (arthop)



state 41

    arthop  ->  CONCAT .   (rule 58)

    $default	reduce using rule 58 (arthop)



state 42

    arthop  ->  GET .   (rule 60)

    $default	reduce using rule 60 (arthop)



state 43

    statement  ->  OUTPUT expression SEMI_COLON .   (rule 8)

    $default	reduce using rule 8 (statement)



state 44

    expression  ->  expression arthop . expression   (rule 25)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    OPEN_PAREN	shift, and go to state 25

    expression	go to state 61
    value	go to state 27



state 45

    expression  ->  expression . arthop expression   (rule 25)
    loop_statement  ->  LOOP OPEN_PAREN expression . CLOSE_PAREN @9 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 62)
    loop_statement  ->  LOOP OPEN_PAREN expression . CLOSE_PAREN @10 statement   (rule 64)

    ADD 	shift, and go to state 39
    REMOVE	shift, and go to state 40
    CONCAT	shift, and go to state 41
    GET 	shift, and go to state 42
    CLOSE_PAREN	shift, and go to state 62

    arthop	go to state 44



state 46

    condition  ->  TRUE .   (rule 48)

    $default	reduce using rule 48 (condition)



state 47

    condition  ->  FALSE .   (rule 49)

    $default	reduce using rule 49 (condition)



state 48

    condition  ->  NOT . condition   (rule 47)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    TRUE	shift, and go to state 46
    FALSE	shift, and go to state 47
    NOT 	shift, and go to state 48
    OPEN_PAREN	shift, and go to state 25

    expression	go to state 49
    value	go to state 50
    condition	go to state 63



state 49

    expression  ->  expression . arthop expression   (rule 25)
    condition  ->  expression . relop expression   (rule 46)

    ADD 	shift, and go to state 39
    REMOVE	shift, and go to state 40
    CONCAT	shift, and go to state 41
    GET 	shift, and go to state 42
    LT  	shift, and go to state 64
    GT  	shift, and go to state 65
    LE  	shift, and go to state 66
    GE  	shift, and go to state 67
    EQ  	shift, and go to state 68
    NE  	shift, and go to state 69
    NOT 	shift, and go to state 70

    relop	go to state 71
    arthop	go to state 44



state 50

    expression  ->  value .   (rule 26)
    condition  ->  value .   (rule 45)

    CLOSE_PAREN	reduce using rule 45 (condition)
    $default	reduce using rule 26 (expression)



state 51

    if_clause  ->  IF OPEN_PAREN condition . CLOSE_PAREN @3 OPEN_BRACKET @4 statement_list CLOSE_BRACKET   (rule 37)
    if_clause  ->  IF OPEN_PAREN condition . CLOSE_PAREN @5 statement   (rule 39)

    CLOSE_PAREN	shift, and go to state 72



state 52

    loop_statement  ->  WHILE OPEN_PAREN condition . CLOSE_PAREN @11 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 66)
    loop_statement  ->  WHILE OPEN_PAREN condition . @12 CLOSE_PAREN statement   (rule 68)

    CLOSE_PAREN	shift, and go to state 73

    CLOSE_PAREN	[reduce using rule 67 (@12)]
    $default	reduce using rule 67 (@12)

    @12 	go to state 74



state 53

    declaration  ->  datatype IDENTIFIER SEMI_COLON .   (rule 15)

    $default	reduce using rule 15 (declaration)



state 54

    declaration  ->  datatype IDENTIFIER @2 . assignment SEMI_COLON   (rule 17)

    EQUAL	shift, and go to state 35

    assignment	go to state 75



state 55

    else_clause  ->  ELSE @6 . statement   (rule 41)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement	go to state 76
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 56

    else_clause  ->  ELSE @7 . OPEN_BRACKET @8 statement_list CLOSE_BRACKET   (rule 44)

    OPEN_BRACKET	shift, and go to state 77



state 57

    expression  ->  expression . arthop expression   (rule 25)
    assignment  ->  EQUAL expression .   (rule 27)

    ADD 	shift, and go to state 39
    REMOVE	shift, and go to state 40
    CONCAT	shift, and go to state 41
    GET 	shift, and go to state 42

    $default	reduce using rule 27 (assignment)

    arthop	go to state 44



state 58

    statement  ->  IDENTIFIER @1 assignment SEMI_COLON .   (rule 6)

    $default	reduce using rule 6 (statement)



state 59

    statement  ->  INPUT SENTENCE_CONSTANT IDENTIFIER SEMI_COLON .   (rule 7)

    $default	reduce using rule 7 (statement)



state 60

    expression  ->  OPEN_PAREN expression CLOSE_PAREN .   (rule 24)

    $default	reduce using rule 24 (expression)



state 61

    expression  ->  expression . arthop expression   (rule 25)
    expression  ->  expression arthop expression .   (rule 25)

    ADD 	shift, and go to state 39
    REMOVE	shift, and go to state 40
    CONCAT	shift, and go to state 41
    GET 	shift, and go to state 42

    ADD 	[reduce using rule 25 (expression)]
    REMOVE	[reduce using rule 25 (expression)]
    CONCAT	[reduce using rule 25 (expression)]
    GET 	[reduce using rule 25 (expression)]
    $default	reduce using rule 25 (expression)

    arthop	go to state 44



state 62

    loop_statement  ->  LOOP OPEN_PAREN expression CLOSE_PAREN . @9 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 62)
    loop_statement  ->  LOOP OPEN_PAREN expression CLOSE_PAREN . @10 statement   (rule 64)

    OPEN_BRACKET	reduce using rule 61 (@9)
    $default	reduce using rule 63 (@10)

    @9  	go to state 78
    @10 	go to state 79



state 63

    condition  ->  NOT condition .   (rule 47)

    $default	reduce using rule 47 (condition)



state 64

    relop  ->  LT .   (rule 55)

    $default	reduce using rule 55 (relop)



state 65

    relop  ->  GT .   (rule 54)

    $default	reduce using rule 54 (relop)



state 66

    relop  ->  LE .   (rule 50)

    $default	reduce using rule 50 (relop)



state 67

    relop  ->  GE .   (rule 51)

    $default	reduce using rule 51 (relop)



state 68

    relop  ->  EQ .   (rule 52)

    $default	reduce using rule 52 (relop)



state 69

    relop  ->  NE .   (rule 53)

    $default	reduce using rule 53 (relop)



state 70

    relop  ->  NOT .   (rule 56)

    $default	reduce using rule 56 (relop)



state 71

    condition  ->  expression relop . expression   (rule 46)

    CHAR_CONSTANT	shift, and go to state 20
    INT_CONSTANT	shift, and go to state 21
    WORD_CONSTANT	shift, and go to state 22
    SENTENCE_CONSTANT	shift, and go to state 23
    IDENTIFIER	shift, and go to state 24
    OPEN_PAREN	shift, and go to state 25

    expression	go to state 80
    value	go to state 27



state 72

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN . @3 OPEN_BRACKET @4 statement_list CLOSE_BRACKET   (rule 37)
    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN . @5 statement   (rule 39)

    OPEN_BRACKET	reduce using rule 35 (@3)
    $default	reduce using rule 38 (@5)

    @3  	go to state 81
    @5  	go to state 82



state 73

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN . @11 OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 66)

    $default	reduce using rule 65 (@11)

    @11 	go to state 83



state 74

    loop_statement  ->  WHILE OPEN_PAREN condition @12 . CLOSE_PAREN statement   (rule 68)

    CLOSE_PAREN	shift, and go to state 84



state 75

    declaration  ->  datatype IDENTIFIER @2 assignment . SEMI_COLON   (rule 17)

    SEMI_COLON	shift, and go to state 85



state 76

    else_clause  ->  ELSE @6 statement .   (rule 41)

    $default	reduce using rule 41 (else_clause)



state 77

    else_clause  ->  ELSE @7 OPEN_BRACKET . @8 statement_list CLOSE_BRACKET   (rule 44)

    $default	reduce using rule 43 (@8)

    @8  	go to state 86



state 78

    loop_statement  ->  LOOP OPEN_PAREN expression CLOSE_PAREN @9 . OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 62)

    OPEN_BRACKET	shift, and go to state 87



state 79

    loop_statement  ->  LOOP OPEN_PAREN expression CLOSE_PAREN @10 . statement   (rule 64)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement	go to state 88
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 80

    expression  ->  expression . arthop expression   (rule 25)
    condition  ->  expression relop expression .   (rule 46)

    ADD 	shift, and go to state 39
    REMOVE	shift, and go to state 40
    CONCAT	shift, and go to state 41
    GET 	shift, and go to state 42

    $default	reduce using rule 46 (condition)

    arthop	go to state 44



state 81

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @3 . OPEN_BRACKET @4 statement_list CLOSE_BRACKET   (rule 37)

    OPEN_BRACKET	shift, and go to state 89



state 82

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @5 . statement   (rule 39)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement	go to state 90
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 83

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @11 . OPEN_BRACKET statement_list CLOSE_BRACKET   (rule 66)

    OPEN_BRACKET	shift, and go to state 91



state 84

    loop_statement  ->  WHILE OPEN_PAREN condition @12 CLOSE_PAREN . statement   (rule 68)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement	go to state 92
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 85

    declaration  ->  datatype IDENTIFIER @2 assignment SEMI_COLON .   (rule 17)

    $default	reduce using rule 17 (declaration)



state 86

    else_clause  ->  ELSE @7 OPEN_BRACKET @8 . statement_list CLOSE_BRACKET   (rule 44)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement_list	go to state 93
    statement	go to state 12
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 87

    loop_statement  ->  LOOP OPEN_PAREN expression CLOSE_PAREN @9 OPEN_BRACKET . statement_list CLOSE_BRACKET   (rule 62)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement_list	go to state 94
    statement	go to state 12
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 88

    loop_statement  ->  LOOP OPEN_PAREN expression CLOSE_PAREN @10 statement .   (rule 64)

    $default	reduce using rule 64 (loop_statement)



state 89

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @3 OPEN_BRACKET . @4 statement_list CLOSE_BRACKET   (rule 37)

    $default	reduce using rule 36 (@4)

    @4  	go to state 95



state 90

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @5 statement .   (rule 39)

    $default	reduce using rule 39 (if_clause)



state 91

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @11 OPEN_BRACKET . statement_list CLOSE_BRACKET   (rule 66)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement_list	go to state 96
    statement	go to state 12
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 92

    loop_statement  ->  WHILE OPEN_PAREN condition @12 CLOSE_PAREN statement .   (rule 68)

    $default	reduce using rule 68 (loop_statement)



state 93

    statement_list  ->  statement_list . statement   (rule 3)
    else_clause  ->  ELSE @7 OPEN_BRACKET @8 statement_list . CLOSE_BRACKET   (rule 44)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10
    CLOSE_BRACKET	shift, and go to state 97

    statement	go to state 31
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 94

    statement_list  ->  statement_list . statement   (rule 3)
    loop_statement  ->  LOOP OPEN_PAREN expression CLOSE_PAREN @9 OPEN_BRACKET statement_list . CLOSE_BRACKET   (rule 62)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10
    CLOSE_BRACKET	shift, and go to state 98

    statement	go to state 31
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 95

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @3 OPEN_BRACKET @4 . statement_list CLOSE_BRACKET   (rule 37)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10

    statement_list	go to state 99
    statement	go to state 12
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 96

    statement_list  ->  statement_list . statement   (rule 3)
    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @11 OPEN_BRACKET statement_list . CLOSE_BRACKET   (rule 66)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10
    CLOSE_BRACKET	shift, and go to state 100

    statement	go to state 31
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 97

    else_clause  ->  ELSE @7 OPEN_BRACKET @8 statement_list CLOSE_BRACKET .   (rule 44)

    $default	reduce using rule 44 (else_clause)



state 98

    loop_statement  ->  LOOP OPEN_PAREN expression CLOSE_PAREN @9 OPEN_BRACKET statement_list CLOSE_BRACKET .   (rule 62)

    $default	reduce using rule 62 (loop_statement)



state 99

    statement_list  ->  statement_list . statement   (rule 3)
    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @3 OPEN_BRACKET @4 statement_list . CLOSE_BRACKET   (rule 37)

    IDENTIFIER	shift, and go to state 1
    CHAR_TYPE	shift, and go to state 2
    INT_TYPE	shift, and go to state 3
    WORD_TYPE	shift, and go to state 4
    SENTENCE_TYPE	shift, and go to state 5
    INPUT	shift, and go to state 6
    OUTPUT	shift, and go to state 7
    LOOP	shift, and go to state 8
    IF  	shift, and go to state 9
    WHILE	shift, and go to state 10
    CLOSE_BRACKET	shift, and go to state 101

    statement	go to state 31
    datatype	go to state 13
    declaration	go to state 14
    conditional_statement	go to state 15
    if_clause	go to state 16
    loop_statement	go to state 17



state 100

    loop_statement  ->  WHILE OPEN_PAREN condition CLOSE_PAREN @11 OPEN_BRACKET statement_list CLOSE_BRACKET .   (rule 66)

    $default	reduce using rule 66 (loop_statement)



state 101

    if_clause  ->  IF OPEN_PAREN condition CLOSE_PAREN @3 OPEN_BRACKET @4 statement_list CLOSE_BRACKET .   (rule 37)

    $default	reduce using rule 37 (if_clause)



state 102

    $   	go to state 103



state 103

    $   	go to state 104



state 104

    $default	accept
